@using SafePass.Proxies
@using SafePass.Data
@using SafePass.Shared
@using SafePass.Services
@using MudBlazor
@inject IDialogService DialogService
@inject LoginService loginService
@inject ISnackbar Snackbar

<EditForm Model="@login" OnValidSubmit="SaveLogin" OnFieldChanged="ValidateForm">
     <DataAnnotationsValidator />
     <MudItem xs="12">
          <MudCard>
               <MudCardContent>
                    <MudTextField Class="p-2" Label="Name" @bind-Value="login.Name" For="@(() => login.Name)" />
                    <MudTextField Class="p-2" Label="Username" @bind-Value="login.Username" For="@(() => login.Username)" />
                    <MudTextField Class="p-2"
                                  Label="Password"
                                  HelperText="Choose a strong password"
                                  @bind-Value="login.Password"
                                  For="@(() => login.Password)"
                                  InputType="@PasswordInputType"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@PasswordIcon"
                                  OnAdornmentClick="TogglePasswordVisibility"
                                  OnFieldChanged="HandlePasswordInput" />
                    <MudButton Class="m-2 " Variant="Variant.Outlined" Color="Color.Primary" OnClick="GeneratePassword">Generate Strong Password</MudButton>
                    <MudTextField Class="p-2" Label="URL" HelperText="Choose a Valid URL" @bind-Value="login.URL" For="@(() => login.URL)" />
                    <ValidationSummary />
               </MudCardContent>
               <MudCardActions Class="ml-auto">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" Disabled="ValidateForm()" Class="me-2">Save</MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
               </MudCardActions>
          </MudCard>
     </MudItem>
</EditForm>

@code {
     [CascadingParameter] MudDialogInstance MudDialog { get; set; }
     [Parameter] public Login login { get; set; }
     
     private InputType PasswordInputType = InputType.Password; // Default to password type
     private string PasswordIcon = Icons.Material.Filled.VisibilityOff; // Default to hidden icon
     private PasswordStrengthSubject _passwordSubject = new PasswordStrengthSubject();
     private string _currentPassword;

     protected override void OnInitialized()
     {
          _passwordSubject.Attach(new PasswordStrengthObserver((message, severity) =>
          {
               PasswordStrengthNotifier.ShowNotification(Snackbar, message, severity);
          }));

          if (login == null)
          {
               login = new Login();
          }
          else if (!string.IsNullOrEmpty(login.Password))
          {
               // Evaluate existing password for edit scenario
               _passwordSubject.Notify(login.Password);
          }
          _currentPassword = login.Password;

     }

     private void GeneratePassword()
     {
          var passwordBuilder = new PasswordBuilder()
              .SetLength(16)
              .IncludeUppercase()
              .IncludeLowercase()
              .IncludeNumbers()
              .IncludeSpecialChars();

          login.Password = passwordBuilder.Build();
          _passwordSubject.Notify(login.Password);
     }

     private async Task SaveLogin()
    {
        if (login.Id == Guid.Empty) // Add
        {
            login.Id = Guid.NewGuid(); // Assign a new ID
            await loginService.CreateLogin(login);
        }
        else // Edit
        {
            await loginService.UpdateLogin(login);
        }
        MudDialog.Close(DialogResult.Ok(true));
    }
     
     private void HandlePasswordInput(ChangeEventArgs e)
     {
          var newValue = e.Value?.ToString();
          if (newValue != null)
          {
               login.Password = newValue;
               _passwordSubject.Notify(newValue);
          }
     }

     private void Cancel()
     {
          MudDialog.Cancel();
     }

     private void TogglePasswordVisibility()
     {
          if (PasswordInputType == InputType.Password)
          {
               PasswordInputType = InputType.Text;
               PasswordIcon = Icons.Material.Filled.Visibility;
          }
          else
          {
               PasswordInputType = InputType.Password;
               PasswordIcon = Icons.Material.Filled.VisibilityOff;
          }
     }

     private bool ValidateForm()
     {
          if (login.Password != _currentPassword)
          {
               HandlePasswordInput(new ChangeEventArgs { Value = login.Password });
               _currentPassword = login.Password;
          }

          return string.IsNullOrWhiteSpace(login.Name) ||
                 string.IsNullOrWhiteSpace(login.Username) ||
                 string.IsNullOrWhiteSpace(login.Password) ||
                 string.IsNullOrWhiteSpace(login.URL);
     }
}

