@page "/forgot-account"
@using SafePass.Services
@inject UserService UserService
@inject NavigationManager NavigationManager
@using MudBlazor

<div class="forgot-account-container">
    <MudCard Class="forgot-account-card pa-6">
        @if (isLoading)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="d-flex mx-auto my-4" />
        }

        <MudText Typo="Typo.h4" Align="Align.Center" Class="header">
            Forgot Account
        </MudText>

        @if (isVerificationPhase)
        {
            <!-- Phase 1: Username Verification -->
            <EditForm Model="usernameModel" OnValidSubmit="VerifyUsername">
                <MudTextField Label="Enter your Username"
                              @bind-Value="usernameModel.UserName"
                              Required="true"
                              FullWidth="true"
                              Variant="Variant.Filled"
                              Class="mb-5" />

                <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit" FullWidth="true">
                    Verify Username
                </MudButton>
            </EditForm>
        }
        else if (isSecurityQuestionPhase)
        {
            <!-- Phase 2: Security Questions -->
            <EditForm Model="securityAnswersModel" OnValidSubmit="VerifySecurityAnswers">
                <MudText Typo="Typo.subtitle2" Align="Align.Left" Class="mb-3">
                    Answer the security questions linked to your account.
                </MudText>

                <MudText Typo="Typo.body1">@securityQuestions[0]</MudText>
                <MudTextField @bind-Value="securityAnswersModel.Answer1"
                              Required="true"
                              FullWidth="true"
                              Variant="Variant.Filled"
                              Class="mb-4" />

                <MudText Typo="Typo.body1">@securityQuestions[1]</MudText>
                <MudTextField @bind-Value="securityAnswersModel.Answer2"
                              Required="true"
                              FullWidth="true"
                              Variant="Variant.Filled"
                              Class="mb-4" />

                <MudText Typo="Typo.body1">@securityQuestions[2]</MudText>
                <MudTextField @bind-Value="securityAnswersModel.Answer3"
                              Required="true"
                              FullWidth="true"
                              Variant="Variant.Filled"
                              Class="mb-4" />

                <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit" FullWidth="true">
                    Verify Answers
                </MudButton>
            </EditForm>
        }
        else if (isPasswordResetPhase)
        {
            <!-- Phase 3: Password Reset -->
            <EditForm Model="passwordResetModel" OnValidSubmit="ResetPassword">
                <MudText Typo="Typo.subtitle2" Align="Align.Left" Class="mb-3">
                    Set a new password for your account.
                </MudText>

                <MudTextField Label="New Password"
                              @bind-Value="passwordResetModel.NewPassword"
                              InputType="@passwordInputType"
                              Adornment="Adornment.End"
                              AdornmentIcon="@passwordIcon"
                              OnAdornmentClick="TogglePasswordVisibility"
                              Required="true"
                              FullWidth="true"
                              Variant="Variant.Filled"
                              Class="mb-4" />

                <MudTextField Label="Confirm Password"
                              @bind-Value="passwordResetModel.ConfirmPassword"
                              InputType="@passwordInputType"
                              Adornment="Adornment.End"
                              AdornmentIcon="@passwordIcon"
                              OnAdornmentClick="TogglePasswordVisibility"
                              Required="true"
                              FullWidth="true"
                              Variant="Variant.Filled"
                              Class="mb-4" />

                <MudButton Variant="Variant.Outlined" Color="Color.Primary" Class="mb-4" OnClick="GeneratePassword">
                    Generate Password
                </MudButton>

                <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit" FullWidth="true">
                    Reset Password
                </MudButton>
            </EditForm>
        }

        <!-- Error Messages -->
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="mt-4">@errorMessage</MudAlert>
        }
    </MudCard>
</div>

<style>
    .forgot-account-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        width: 100vw;
        background: linear-gradient(180deg, #6a11cb, #2575fc);
        position: fixed;
        overflow: hidden;
        top: 0;
        left: 0;
    }

        .forgot-account-container::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('/images/watermark.svg') repeat; /* Replace with the path to your watermark SVG */
            background-size: 100px 100px; /* Adjust watermark size */
            opacity: 0.2; /* Subtle watermark */
            z-index: 0; /* Place behind other content */
        }

    .forgot-account-card {
        width: 480px;
        padding: 30px;
        background: white;
        box-shadow: 0px 8px 20px rgba(0, 0, 0, 0.2);
        border-radius: 15px;
        z-index: 1; /* Ensure card is above the watermark */
    }

    .header {
        font-size: 2.2rem;
        color: #6a11cb;
        font-weight: bold;
        margin-bottom: 20px;
    }
</style>

@code {
    private bool isLoading = false;
    private bool isVerificationPhase = true;
    private bool isSecurityQuestionPhase = false;
    private bool isPasswordResetPhase = false;

    private string errorMessage = string.Empty;

    private UsernameModel usernameModel = new();
    private SecurityAnswersModel securityAnswersModel = new();
    private PasswordResetModel passwordResetModel = new();

    private List<string> securityQuestions = new();

    private InputType passwordInputType = InputType.Password;
    private string passwordIcon = Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        passwordInputType = passwordInputType == InputType.Password ? InputType.Text : InputType.Password;
        passwordIcon = passwordInputType == InputType.Password
            ? Icons.Material.Filled.VisibilityOff
            : Icons.Material.Filled.Visibility;
    }

    private void GeneratePassword()
    {
        var passwordBuilder = new PasswordBuilder()
            .SetLength(16)
            .IncludeUppercase()
            .IncludeLowercase()
            .IncludeNumbers()
            .IncludeSpecialChars();

        passwordResetModel.NewPassword = passwordBuilder.Build();
        passwordResetModel.ConfirmPassword = passwordResetModel.NewPassword;
    }

    private async Task VerifyUsername()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            securityQuestions = await UserService.GetSecurityQuestionsAsync(usernameModel.UserName);

            if (securityQuestions.Count == 3)
            {
                isVerificationPhase = false;
                isSecurityQuestionPhase = true;
            }
            else
            {
                errorMessage = "Unable to fetch security questions for the provided username.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task VerifySecurityAnswers()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var isValid = await UserService.VerifySecurityAnswersAsync(
                usernameModel.UserName,
                securityAnswersModel.Answer1,
                securityAnswersModel.Answer2,
                securityAnswersModel.Answer3
            );

            if (isValid)
            {
                isSecurityQuestionPhase = false;
                isPasswordResetPhase = true;
            }
            else
            {
                errorMessage = "One or more answers are incorrect.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ResetPassword()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            if (passwordResetModel.NewPassword != passwordResetModel.ConfirmPassword)
            {
                errorMessage = "Passwords do not match.";
                return;
            }

            await UserService.ResetPasswordAsync(usernameModel.UserName, passwordResetModel.NewPassword);

            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private class UsernameModel
    {
        public string UserName { get; set; } = string.Empty;
    }

    private class SecurityAnswersModel
    {
        public string Answer1 { get; set; } = string.Empty;
        public string Answer2 { get; set; } = string.Empty;
        public string Answer3 { get; set; } = string.Empty;
    }

    private class PasswordResetModel
    {
        public string NewPassword { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
