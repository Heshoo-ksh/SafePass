@page "/LoginVault"
@using SafePass.Data
@using SafePass.Services
@using MudBlazor
@inject LoginService LoginService
@inject IDialogService DialogService

<MudTable Items="@Logins" Filter="new Func<Login,bool>(FilterFunc1)">
     <ToolBarContent>
          <MudText Typo="Typo.h6">Login Vault</MudText>
          <MudSpacer />
          <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
     </ToolBarContent>

     <HeaderContent>
          <MudTh>Name</MudTh>
          <MudTh>Username</MudTh>
          <MudTh>Password</MudTh>
          <MudTh>URL</MudTh>
          <MudTh>Actions</MudTh>
     </HeaderContent>

     <RowTemplate>
          <MudTd DataLabel="Name">@context.Name</MudTd>
          <MudTd DataLabel="Username">@context.Username</MudTd>
          <MudTd DataLabel="Password">@context.Password</MudTd>
          <MudTd DataLabel="URL">@context.URL</MudTd>
          <MudTd>
               <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => OpenDeleteDialog(context.Id, context.Name)" />
          </MudTd>
     </RowTemplate>

     <PagerContent>
          <MudTablePager />
     </PagerContent>
</MudTable>

@code {
     private string searchString1 = "";
     private IEnumerable<Login> Logins = new List<Login>();
     private Guid deleteId;

     protected override async Task OnInitializedAsync()
     {
          Logins = await LoginService.GetAllLogins();
     }

     private async Task OpenDeleteDialog(Guid id, string name)
     {
          var parameters = new DialogParameters
            {
                { "DeleteId", id },
                { "Message", $"Are you sure you want to delete the login record for '{name}'?" } // Pass custom message
            };

          var options = new DialogOptions() { MaxWidth = MaxWidth.Small };
          var dialog = DialogService.Show<DeleteDialog>("Confirm Delete", parameters, options);
          var result = await dialog.Result;

          if (!result.Canceled)
          {
               // Refresh the data
               Logins = await LoginService.GetAllLogins();
          }
     }


     private bool FilterFunc1(Login login) => FilterFunc(login, searchString1);

     private bool FilterFunc(Login login, string searchString)
     {
          if (string.IsNullOrWhiteSpace(searchString))
               return true;
          if (login.Username.Contains(searchString, StringComparison.OrdinalIgnoreCase))
               return true;
          if (login.URL.Contains(searchString, StringComparison.OrdinalIgnoreCase))
               return true;
          if (login.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
               return true;
          if ($"{login.Name} {login.Username} {login.Password} {login.URL}".Contains(searchString))
               return true;
          return false;
     }
}
