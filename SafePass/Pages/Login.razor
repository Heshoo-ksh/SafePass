@page "/login"
@using SafePass.Services
@inject UserService UserService
@inject AuthState AuthState
@inject NavigationManager NavigationManager
@using MudBlazor
@using SafePass.Data

<div class="login-container">
    <MudCard Class="login-card pa-6">
        @if (isLoading)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="d-flex mx-auto my-4" />
        }

        <MudText Typo="Typo.h4" Align="Align.Center" Class="login-header">
            Welcome Back!
        </MudText>

        <MudText Typo="Typo.body1" Align="Align.Center" Class="login-subtext">
            Please enter your credentials to access your account.
        </MudText>

        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <MudTextField Label="Username/Email"
                          @bind-Value="loginModel.UserName"
                          Required="true"
                          FullWidth="true"
                          Variant="Variant.Filled"
                          Class="mb-5 login-input" />

            <MudTextField Label="Password"
                          @bind-Value="loginModel.Password"
                          InputType="@PasswordInputType"
                          Required="true"
                          FullWidth="true"
                          Variant="Variant.Filled"
                          Class="mb-5 login-input"
                          Adornment="Adornment.End"
                          AdornmentIcon="@PasswordIcon"
                          OnAdornmentClick="TogglePasswordVisibility" />

            <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Class="login-button" FullWidth="true">
                Login
            </MudButton>
        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Warning" Class="mt-5">@errorMessage</MudAlert>
        }

        <MudText Typo="Typo.subtitle2" Align="Align.Center" Class="login-link mt-6">
            Don't have an account?
            <MudLink Href="/register" Class="ml-1">Sign up</MudLink>
        </MudText>
    </MudCard>
</div>

<style>
    /* Styling remains unchanged */
    html, body {
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
    }

    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        width: 100vw;
        background: linear-gradient(180deg, #6a11cb, #2575fc);
        position: fixed;
        overflow: hidden;
        top: 0;
        left: 0;
    }

        .login-container::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('/images/watermark.svg') repeat;
            background-size: 100px 100px;
            opacity: 0.2;
            z-index: 0;
        }

    .login-card {
        width: 480px;
        min-height: 420px;
        padding: 40px;
        background: white;
        box-shadow: 0px 8px 20px rgba(0, 0, 0, 0.2);
        border-radius: 15px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        z-index: 1;
    }

        .login-card:hover {
            transform: scale(1.03);
            box-shadow: 0px 12px 30px rgba(0, 0, 0, 0.3);
        }

    .login-header {
        font-size: 2.2rem;
        color: #6a11cb;
        font-weight: bold;
        margin-bottom: 20px;
    }

    .login-subtext {
        font-size: 1rem;
        color: #555;
        margin-bottom: 40px;
    }

    .login-input {
        background-color: #f4f6f8 !important;
        border-radius: 8px !important;
    }

    .login-button {
        background-color: #6a11cb !important;
        font-size: 1.1rem;
        font-weight: bold;
        border-radius: 8px !important;
        color: white;
        transition: background-color 0.3s ease;
    }

        .login-button:hover {
            background-color: #2575fc !important;
        }

    .login-link {
        color: #2575fc;
    }

        .login-link a {
            text-decoration: underline;
            font-weight: bold;
        }
</style>

@code {
    private LoginRequest loginModel = new LoginRequest();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private InputType PasswordInputType = InputType.Password; // Default to password type
    private string PasswordIcon = Icons.Material.Filled.VisibilityOff; // Default to hidden icon

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var user = await UserService.ValidateUserAsync(loginModel.UserName, loginModel.Password);

            if (user != null)
            {
                AuthState.LogIn(loginModel.UserName); // Update authentication state
                NavigationManager.NavigateTo("/dashboard");
            }
            else
            {
                errorMessage = "Invalid username or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void TogglePasswordVisibility()
    {
        if (PasswordInputType == InputType.Password)
        {
            PasswordInputType = InputType.Text;
            PasswordIcon = Icons.Material.Filled.Visibility;
        }
        else
        {
            PasswordInputType = InputType.Password;
            PasswordIcon = Icons.Material.Filled.VisibilityOff;
        }
    }
}
