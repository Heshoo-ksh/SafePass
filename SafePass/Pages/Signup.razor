@page "/register"
@using SafePass.Services
@inject UserService UserService
@inject AuthState AuthState
@inject NavigationManager NavigationManager
@using MudBlazor
@using SafePass.Data

<div class="register-container">
    <MudCard Class="register-card pa-5">
        @if (isLoading)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="d-flex mx-auto my-4" />
        }

        <MudText Typo="Typo.h4" Align="Align.Center" Class="register-header">
            Create Your Account
        </MudText>

        <MudText Typo="Typo.body1" Align="Align.Center" Class="register-subtext">
            Please fill in your details to get started.
        </MudText>

        <EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
            <!-- Username/Email -->
            <MudTextField Label="Username/Email"
                          @bind-Value="registerModel.UserName"
                          Required="true"
                          FullWidth="true"
                          Variant="Variant.Filled"
                          Class="mb-4 register-input" />

            <!-- Password -->
            <MudTextField Label="Password"
                          @bind-Value="registerModel.Password"
                          InputType="@PasswordInputType"
                          Required="true"
                          FullWidth="true"
                          Variant="Variant.Filled"
                          Class="mb-4 register-input"
                          Adornment="Adornment.End"
                          AdornmentIcon="@PasswordIcon"
                          OnAdornmentClick="TogglePasswordVisibility" />

            <!-- Confirm Password -->
            <MudTextField Label="Confirm Password"
                          @bind-Value="registerModel.ConfirmPassword"
                          InputType="@PasswordInputType"
                          Required="true"
                          FullWidth="true"
                          Variant="Variant.Filled"
                          Class="mb-4 register-input"
                          Adornment="Adornment.End"
                          AdornmentIcon="@PasswordIcon"
                          OnAdornmentClick="TogglePasswordVisibility" />

            <!-- Security Questions -->
            <MudSelect Label="Security Question 1"
                       T="string"
                       @bind-Value="registerModel.SecurityQuestion1"
                       Required="true"
                       FullWidth="true"
                       Variant="Variant.Filled"
                       Class="mb-4">
                @foreach (var question in securityQuestions)
                {
                    <MudSelectItem T="string" Value="@question">@question</MudSelectItem>
                }
            </MudSelect>
            <MudTextField Label="Answer 1"
                          @bind-Value="registerModel.SecurityAnswer1"
                          InputType="InputType.Text"
                          Required="true"
                          FullWidth="true"
                          Variant="Variant.Filled"
                          Class="mb-4 register-input" />

            <MudSelect Label="Security Question 2"
                       T="string"
                       @bind-Value="registerModel.SecurityQuestion2"
                       Required="true"
                       FullWidth="true"
                       Variant="Variant.Filled"
                       Class="mb-4">
                @foreach (var question in securityQuestions)
                {
                    <MudSelectItem T="string" Value="@question">@question</MudSelectItem>
                }
            </MudSelect>
            <MudTextField Label="Answer 2"
                          @bind-Value="registerModel.SecurityAnswer2"
                          InputType="InputType.Text"
                          Required="true"
                          FullWidth="true"
                          Variant="Variant.Filled"
                          Class="mb-4 register-input" />

            <MudSelect Label="Security Question 3"
                       T="string"
                       @bind-Value="registerModel.SecurityQuestion3"
                       Required="true"
                       FullWidth="true"
                       Variant="Variant.Filled"
                       Class="mb-4">
                @foreach (var question in securityQuestions)
                {
                    <MudSelectItem T="string" Value="@question">@question</MudSelectItem>
                }
            </MudSelect>
            <MudTextField Label="Answer 3"
                          @bind-Value="registerModel.SecurityAnswer3"
                          InputType="InputType.Text"
                          Required="true"
                          FullWidth="true"
                          Variant="Variant.Filled"
                          Class="mb-4 register-input" />

            <!-- Submit Button -->
            <MudButton Color="Color.Primary"
                       Variant="Variant.Filled"
                       ButtonType="ButtonType.Submit"
                       Class="mt-4 register-button"
                       FullWidth="true">Register</MudButton>
        </EditForm>

        <!-- Error Messages -->
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="mt-4">@errorMessage</MudAlert>
        }

        <!-- Hyperlink to Login Page -->
        <MudText Typo="Typo.subtitle2" Align="Align.Center" Class="mt-4">
            Already have an account?
            <MudLink Href="/login" Class="ml-1">Login</MudLink>
        </MudText>
    </MudCard>
</div>

<style>
    /* Reset all margins and padding */
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    html, body {
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
    }

    /* Full viewport gradient background with watermark */
    .register-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        width: 100vw;
        background: linear-gradient(180deg, #6a11cb, #2575fc);
        position: fixed;
        overflow: hidden;
        top: 0;
        left: 0;
    }

        /* SVG watermark as repeating background */
        .register-container::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('/images/watermark.svg') repeat;
            background-size: 100px 100px; /* Adjust size of the watermark */
            opacity: 0.2; /* Make watermark subtle */
            z-index: 0;
        }

    /* Card Styling */
    .register-card {
        width: 480px; /* Slightly smaller than before */
        padding: 30px;
        background: white;
        box-shadow: 0px 8px 20px rgba(0, 0, 0, 0.2);
        border-radius: 15px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        z-index: 1; /* Ensure card appears above watermark */
    }

        .register-card:hover {
            transform: scale(1.03);
            box-shadow: 0px 12px 30px rgba(0, 0, 0, 0.3);
        }

    /* Header Styling */
    .register-header {
        font-size: 2.2rem;
        color: #6a11cb;
        font-weight: bold;
        margin-bottom: 15px;
    }

    /* Subtext Styling */
    .register-subtext {
        font-size: 1rem;
        color: #555;
        margin-bottom: 30px;
    }

    /* Input Fields */
    .register-input {
        background-color: #f4f6f8 !important;
        border-radius: 8px !important;
    }

    /* Register Button */
    .register-button {
        background-color: #6a11cb !important;
        font-size: 1.1rem;
        font-weight: bold;
        border-radius: 8px !important;
        color: white;
        transition: background-color 0.3s ease;
    }

        .register-button:hover {
            background-color: #2575fc !important;
        }

    /* Link Styling */
    .register-link {
        color: #2575fc;
    }

        .register-link a {
            text-decoration: underline;
            font-weight: bold;
        }
</style>

@code {
    private RegisterRequest registerModel = new RegisterRequest();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private InputType PasswordInputType = InputType.Password; // Default to password type
    private string PasswordIcon = Icons.Material.Filled.VisibilityOff; // Default to hidden icon

    private void TogglePasswordVisibility()
    {
        if (PasswordInputType == InputType.Password)
        {
            PasswordInputType = InputType.Text;
            PasswordIcon = Icons.Material.Filled.Visibility;
        }
        else
        {
            PasswordInputType = InputType.Password;
            PasswordIcon = Icons.Material.Filled.VisibilityOff;
        }
    }

    private List<string> securityQuestions = new List<string>
    {
        "What is your mother's maiden name?",
        "What was the name of your first pet?",
        "What was your first car?",
        "What is your favorite movie?",
        "What is the name of your best friend?"
    };

    private async Task HandleRegister()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            // Validate passwords
            if (registerModel.Password != registerModel.ConfirmPassword)
            {
                errorMessage = "Passwords do not match.";
                return;
            }

            var user = new User
                {
                    UserName = registerModel.UserName,
                    Password = registerModel.Password,
                    SecurityQuestion1 = registerModel.SecurityQuestion1,
                    SecurityAnswer1 = registerModel.SecurityAnswer1,
                    SecurityQuestion2 = registerModel.SecurityQuestion2,
                    SecurityAnswer2 = registerModel.SecurityAnswer2,
                    SecurityQuestion3 = registerModel.SecurityQuestion3,
                    SecurityAnswer3 = registerModel.SecurityAnswer3
                };

            var result = await UserService.RegisterUserAsync(user);

            if (result)
            {
                AuthState.LogIn(user.UserName);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = "Registration failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
