@page "/register"
@using SafePass.Services
@inject UserService UserService
@inject AuthState AuthState
@inject NavigationManager NavigationManager
@using MudBlazor
@using SafePass.Data

<div class="register-container">
    <MudCard Class="register-card pa-5">
        @if (isLoading)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="d-flex mx-auto my-4" />
        }

        <MudText Typo="Typo.h4" Align="Align.Center" Class="register-header">
            Create Your Account
        </MudText>

        <MudText Typo="Typo.body1" Align="Align.Center" Class="register-subtext">
            Please fill in your details to get started.
        </MudText>

        <EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
            <!-- Username/Email -->
            <MudTextField Label="Username/Email"
                          @bind-Value="registerModel.UserName"
                          Required="true"
                          FullWidth="true"
                          Variant="Variant.Filled"
                          Class="mb-4 register-input" />

            <!-- Password -->
            <MudTextField Label="Password"
                          @bind-Value="registerModel.Password"
                          InputType="@PasswordInputType"
                          Required="true"
                          FullWidth="true"
                          Variant="Variant.Filled"
                          Class="mb-4 register-input"
                          Adornment="Adornment.End"
                          AdornmentIcon="@PasswordIcon"
                          OnAdornmentClick="TogglePasswordVisibility" />
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" Class="mb-4" OnClick="GeneratePassword">
                Generate Password
            </MudButton>

            <!-- Confirm Password -->
            <MudTextField Label="Confirm Password"
                          @bind-Value="registerModel.ConfirmPassword"
                          InputType="@PasswordInputType"
                          Required="true"
                          FullWidth="true"
                          Variant="Variant.Filled"
                          Class="mb-4 register-input"
                          Adornment="Adornment.End"
                          AdornmentIcon="@PasswordIcon"
                          OnAdornmentClick="TogglePasswordVisibility" />

            <!-- Security Questions -->
            <MudSelect Label="Security Question 1"
                       T="string"
                       @bind-Value="registerModel.SecurityQuestion1"
                       Required="true"
                       FullWidth="true"
                       Variant="Variant.Filled"
                       Class="mb-4">
                @foreach (var question in securityQuestions)
                {
                    <MudSelectItem T="string" Value="@question" Disabled="@(IsQuestionSelected(question))">@question</MudSelectItem>
                }
            </MudSelect>
            <MudTextField Label="Answer 1"
                          @bind-Value="registerModel.SecurityAnswer1"
                          InputType="InputType.Text"
                          Required="true"
                          FullWidth="true"
                          Variant="Variant.Filled"
                          Class="mb-4 register-input" />

            <MudSelect Label="Security Question 2"
                       T="string"
                       @bind-Value="registerModel.SecurityQuestion2"
                       Required="true"
                       FullWidth="true"
                       Variant="Variant.Filled"
                       Class="mb-4">
                @foreach (var question in securityQuestions)
                {
                    <MudSelectItem T="string" Value="@question" Disabled="@(IsQuestionSelected(question))">@question</MudSelectItem>
                }
            </MudSelect>
            <MudTextField Label="Answer 2"
                          @bind-Value="registerModel.SecurityAnswer2"
                          InputType="InputType.Text"
                          Required="true"
                          FullWidth="true"
                          Variant="Variant.Filled"
                          Class="mb-4 register-input" />

            <MudSelect Label="Security Question 3"
                       T="string"
                       @bind-Value="registerModel.SecurityQuestion3"
                       Required="true"
                       FullWidth="true"
                       Variant="Variant.Filled"
                       Class="mb-4">
                @foreach (var question in securityQuestions)
                {
                    <MudSelectItem T="string" Value="@question" Disabled="@(IsQuestionSelected(question))">@question</MudSelectItem>
                }
            </MudSelect>
            <MudTextField Label="Answer 3"
                          @bind-Value="registerModel.SecurityAnswer3"
                          InputType="InputType.Text"
                          Required="true"
                          FullWidth="true"
                          Variant="Variant.Filled"
                          Class="mb-4 register-input" />

            <!-- Submit Button -->
            <MudButton Color="Color.Primary"
                       Variant="Variant.Filled"
                       ButtonType="ButtonType.Submit"
                       Class="mt-4 register-button"
                       FullWidth="true">Register</MudButton>
        </EditForm>

        <!-- Error Messages -->
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="mt-4">@errorMessage</MudAlert>
        }

        <!-- Hyperlink to Login Page -->
        <MudText Typo="Typo.subtitle2" Align="Align.Center" Class="mt-4">
            Already have an account?
            <MudLink Href="/login" Class="ml-1">Login</MudLink>
        </MudText>
    </MudCard>
</div>

<style>
    html, body {
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
    }

    /* Full viewport gradient background with watermark */
    .register-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        width: 100vw;
        background: linear-gradient(180deg, #4e0f9a, #1d63cc);
        position: fixed;
        top: 0;
        left: 0;
        overflow: hidden;
    }
        /* Watermark pseudo-element */
        .register-container::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('/images/watermark.svg') repeat;
            background-size: 100px 100px; /* Adjust watermark size */
            opacity: 0.2; /* Subtle watermark */
            z-index: 0; /* Behind the card */
        }

    .register-card {
        width: 480px;
        max-width: 90%;
        padding: 30px;
        background: white;
        box-shadow: 0px 8px 20px rgba(0, 0, 0, 0.2);
        border-radius: 15px;
        z-index: 1; /* Ensure card is above watermark */
    }

    .register-header {
        font-size: 2.2rem;
        color: #6a11cb;
        font-weight: bold;
        margin-bottom: 15px;
    }

    .register-subtext {
        font-size: 1rem;
        color: #555;
        margin-bottom: 30px;
    }

    .register-input {
        background-color: #f4f6f8 !important;
        border-radius: 8px !important;
    }

    .register-button {
        background-color: #6a11cb !important;
        font-size: 1.1rem;
        font-weight: bold;
        border-radius: 8px !important;
        color: white;
    }
</style>

@code {
    private RegisterRequest registerModel = new RegisterRequest();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private InputType PasswordInputType = InputType.Password;
    private string PasswordIcon = Icons.Material.Filled.VisibilityOff;

    private List<string> securityQuestions = new List<string>
    {
        "What is your mother's maiden name?",
        "What was the name of your first pet?",
        "What was your first car?",
        "What is your favorite movie?",
        "What is the name of your best friend?"
    };

    private bool IsQuestionSelected(string question)
    {
        // Disable a question if it's selected in any of the other dropdowns
        return question == registerModel.SecurityQuestion1 ||
               question == registerModel.SecurityQuestion2 ||
               question == registerModel.SecurityQuestion3;
    }

    private void TogglePasswordVisibility()
    {
        PasswordInputType = PasswordInputType == InputType.Password ? InputType.Text : InputType.Password;
        PasswordIcon = PasswordInputType == InputType.Password
            ? Icons.Material.Filled.VisibilityOff
            : Icons.Material.Filled.Visibility;
    }

    private void GeneratePassword()
    {
        var passwordBuilder = new PasswordBuilder()
            .SetLength(16)
            .IncludeUppercase()
            .IncludeLowercase()
            .IncludeNumbers()
            .IncludeSpecialChars();

        registerModel.Password = passwordBuilder.Build();
    }

    private async Task HandleRegister()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            if (registerModel.Password != registerModel.ConfirmPassword)
            {
                errorMessage = "Passwords do not match.";
                return;
            }

            var user = new User
                {
                    UserName = registerModel.UserName,
                    Password = registerModel.Password,
                    SecurityQuestion1 = registerModel.SecurityQuestion1,
                    SecurityAnswer1 = registerModel.SecurityAnswer1,
                    SecurityQuestion2 = registerModel.SecurityQuestion2,
                    SecurityAnswer2 = registerModel.SecurityAnswer2,
                    SecurityQuestion3 = registerModel.SecurityQuestion3,
                    SecurityAnswer3 = registerModel.SecurityAnswer3
                };

            var result = await UserService.RegisterUserAsync(user);

            if (result)
            {
                AuthState.LogIn(user.UserName);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = "Registration failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}